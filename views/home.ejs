<% layout("layouts/boilerplate") %>

<!-- Hero Section -->
<div class="hero-section">
  <div class="container text-center">
    <div class="hero-content">
      <i class="bi bi-droplet-half display-1 text-primary mb-3"></i>
      <h1 class="h2 fw-bold text-white mb-3">Hydroponics Farm Dashboard</h1>
      <p class="lead text-white-50 mb-4">Monitor and manage your crops with precision</p>
      <a href="/farm/newcrop" class="btn btn-success btn-lg px-4 py-2">
        <i class="bi bi-plus-circle me-2"></i>Add New Crop
      </a>
    </div>
  </div>
</div>

<!-- Stats Cards -->
<div class="container my-5">
  <div class="row g-4 mb-5">
    <div class="col-lg-3 col-md-6">
      <div class="stat-card" onclick="toggleCard(this)">
        <div class="stat-content">
          <i class="bi bi-collection display-6"></i>
          <div class="stat-info">
            <h3><%= totalCropsCount %></h3>
            <p>Total Crops</p>
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-3 col-md-6">
      <div class="stat-card" onclick="toggleCard(this)">
        <div class="stat-content">
          <i class="bi bi-check-circle display-6"></i>
          <div class="stat-info">
            <h3><%= activeCropsCount %></h3>
            <p>Active Crops</p>
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-3 col-md-6">
      <div class="stat-card" onclick="toggleCard(this)">
        <div class="stat-content">
          <i class="bi bi-x-circle display-6"></i>
          <div class="stat-info">
            <h3><%= inactiveCropsCount %></h3>
            <p>Inactive Crops</p>
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-3 col-md-6">
      <div class="stat-card" onclick="toggleCard(this)">
        <div class="stat-content">
          <i class="bi bi-thermometer-half display-6"></i>
          <div class="stat-info">
            <h3 id="current-temp"><%= weather.temperature %>Â°C</h3>
            <p>Temperature</p>
            <small><i class="bi bi-geo-alt"></i> <span id="location">Loading...</span></small>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Crops Grid -->
  <div class="row">
    <div class="col-12">
      <div class="mb-4">
        <h2 class="mb-0 fw-bold text-white">Your Crops</h2>
      </div>
      <% if (crops.length === 0) { %>
        <div class="empty-state text-center py-5">
          <i class="bi bi-seedling display-1 text-muted mb-3"></i>
          <h3 class="text-muted">No crops yet</h3>
          <p class="text-muted mb-4">Start your hydroponic journey by adding your first crop</p>
          <a href="/farm/newcrop" class="btn btn-primary btn-lg">
            <i class="bi bi-plus-circle me-2"></i>Add Your First Crop
          </a>
        </div>
      <% } else { %>
        <div class="row g-4">
          <% crops.forEach(crop => { %>
            <div class="col-lg-4 col-md-6 crop-item" data-name="<%= crop.name.toLowerCase() %>" data-status="<%= (crop.active !== false) ? 'active' : 'inactive' %>">
              <div class="crop-card">
                <div class="crop-header">
                  <i class="bi bi-seedling text-success fs-2"></i>
                  <div class="crop-name-status">
                    <h5 class="fw-bold mb-0"><%= crop.name %></h5>
                    <span class="status-dot <%= (crop.active !== false) ? 'active' : 'inactive' %>"></span>
                  </div>
                </div>
                <div class="crop-actions">
                  <a href="/farm/influx/<%= crop._id %>" class="btn btn-primary btn-sm">
                    <i class="bi bi-graph-up"></i> View Reading
                  </a>
                  <a href="/farm/cropreading/<%= crop._id %>" class="btn btn-success btn-sm">
                    <i class="bi bi-plus-circle"></i> Add Reading
                  </a>
                  <a href="/farm/edit/<%= crop._id %>" class="btn btn-warning btn-sm">
                    <i class="bi bi-pencil"></i> Edit
                  </a>
                  <form action="/farm/delete/<%= crop._id %>?_method=DELETE" method="POST">
                    <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Delete this crop?')">
                      <i class="bi bi-trash"></i>
                    </button>
                  </form>
                </div>
              </div>
            </div>
          <% }) %>
        </div>
      <% } %>
    </div>
  </div>
</div>

<style>
  body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
  }

  .hero-section {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.9), rgba(118, 75, 162, 0.9));
    padding: 40px 0;
    margin-top: -48px;
  }

  .hero-content {
    animation: fadeInUp 1s ease-out;
  }

  .stat-card {
    background: white;
    border: 2px solid rgba(0, 0, 0, 0.1);
    width: 150px;
    height: 150px;
    border-radius: 50%;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    transition: all 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    margin: 0 auto;
  }

  .stat-card.expanded {
    width: 300px;
    height: 120px;
    border-radius: 25px;
    flex-direction: row;
    justify-content: space-around;
    padding: 0 20px;
  }

  .stat-card:hover {
    transform: translateY(-10px) scale(1.05);
    box-shadow: 0 20px 50px rgba(0,0,0,0.3);
  }

  .stat-card:nth-child(1) .display-6 {
    color: #007bff !important;
  }

  .stat-card:nth-child(2) .display-6 {
    color: #28a745 !important;
  }

  .stat-card:nth-child(3) .display-6 {
    color: #dc3545 !important;
  }

  .stat-card:nth-child(4) .display-6 {
    color: #ffc107 !important;
  }

  .stat-card .display-6 {
    font-size: 2rem !important;
    margin-bottom: 5px;
    transition: all 0.3s ease;
  }

  .stat-card.expanded .display-6 {
    font-size: 2.5rem !important;
    margin-bottom: 0;
    margin-right: 15px;
  }

  .stat-card h3 {
    font-size: 1.8rem !important;
    font-weight: 700 !important;
    color: #333 !important;
    margin: 5px 0 !important;
  }

  .stat-card.expanded h3 {
    font-size: 2.2rem !important;
  }

  .stat-card p {
    color: #666 !important;
    font-weight: 600 !important;
    font-size: 0.8rem !important;
    margin-bottom: 0 !important;
    text-align: center;
  }

  .stat-card.expanded p {
    font-size: 1rem !important;
  }

  .stat-card small {
    color: #888 !important;
    font-size: 0.7rem !important;
  }

  .stat-card.expanded small {
    font-size: 0.8rem !important;
  }

  .stat-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    transition: all 0.3s ease;
  }

  .stat-card.expanded .stat-content {
    flex-direction: row;
    align-items: center;
  }

  .stat-info {
    text-align: center;
  }

  .stat-card.expanded .stat-info {
    text-align: left;
  }

  .crop-card {
    background: white;
    border-radius: 15px;
    padding: 25px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    height: 100%;
  }

  .crop-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 40px rgba(0,0,0,0.2);
  }

  .crop-header {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid #f8f9fa;
  }

  .crop-name-status {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .status-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
    box-shadow: 0 0 0 2px white, 0 0 0 3px currentColor;
  }

  .status-dot.active {
    background-color: #28a745;
    color: #28a745;
  }

  .status-dot.inactive {
    background-color: #dc3545;
    color: #dc3545;
  }

  .crop-actions {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    align-items: stretch;
  }

  .crop-actions .btn {
    flex: 1;
    min-width: 85px;
    text-align: center;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
  }

  .crop-actions form {
    flex: 1;
    margin: 0;
  }

  .crop-actions form .btn {
    width: 100%;
    height: 32px;
    margin: 0;
  }

  .empty-state {
    background: white;
    border-radius: 15px;
    margin: 50px 0;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
  }

  .container {
    position: relative;
    z-index: 1;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .btn {
    border-radius: 8px;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .btn:hover {
    transform: translateY(-2px);
  }



  .crop-item {
    transition: all 0.3s ease;
  }

  .crop-item.hidden {
    display: none !important;
  }


</style>

<script>
// Get user location and weather
if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(async (position) => {
    const lat = position.coords.latitude;
    const lon = position.coords.longitude;
    
    try {
      // Get location name
      const locationResponse = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=en`);
      const locationData = await locationResponse.json();
      document.getElementById('location').textContent = locationData.city || locationData.locality || 'Unknown Location';
      
      // Get real weather data from OpenWeatherMap (same as crop reading form)
      const apiKey = '3466ccea418dd7adef8431c05d6c8042';
      const weatherResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`);
      
      if (weatherResponse.ok) {
        const weatherData = await weatherResponse.json();
        const temp = Math.round(weatherData.main.temp);
        document.getElementById('current-temp').textContent = temp + 'Â°C';
      }
      
    } catch (error) {
      document.getElementById('location').textContent = 'Location unavailable';
    }
  }, (error) => {
    document.getElementById('location').textContent = 'Location access denied';
  });
} else {
  document.getElementById('location').textContent = 'Geolocation not supported';
}

// Circular card toggle functionality
function toggleCard(card) {
  // Close all other expanded cards
  document.querySelectorAll('.stat-card.expanded').forEach(otherCard => {
    if (otherCard !== card) {
      otherCard.classList.remove('expanded');
    }
  });
  
  // Toggle current card
  card.classList.toggle('expanded');
}

// Search and Filter functionality using navbar controls
const searchInput = document.getElementById('navSearchCrop');
const filterSelect = document.getElementById('navFilterStatus');
const cropItems = document.querySelectorAll('.crop-item');

function filterCrops() {
  if (!searchInput || !filterSelect || !cropItems.length) return;
  
  const searchTerm = searchInput.value.toLowerCase();
  const statusFilter = filterSelect.value;
  
  cropItems.forEach(item => {
    const cropName = item.dataset.name;
    const cropStatus = item.dataset.status;
    
    const matchesSearch = cropName.includes(searchTerm);
    const matchesFilter = statusFilter === 'all' || cropStatus === statusFilter;
    
    if (matchesSearch && matchesFilter) {
      item.classList.remove('hidden');
    } else {
      item.classList.add('hidden');
    }
  });
}

if (searchInput && filterSelect) {
  searchInput.addEventListener('input', filterCrops);
  filterSelect.addEventListener('change', filterCrops);
}
</script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css">